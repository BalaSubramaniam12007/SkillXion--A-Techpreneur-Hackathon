import React, { useState, useEffect, useCallback, useReducer } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  ChevronDown, ChevronUp, Loader2, Sparkles, Brain, ChevronLeft, ChevronRight, 
  AlertTriangle, Bookmark, Star, ArrowRight, CheckCircle 
} from 'lucide-react';
import { generateIdeas } from './api/generateIdeas';
import { generateBrandNames } from './api/generateBrandNames';
import { generateBusinessPlan } from './api/generateBusinessPlan'; // New import
import Header from '../../../pages/Header';
import { supabase } from '../../../lib/supabase';
import LogoGeneration from './LogoGeneration';

// Retry logic
const RETRY_DELAYS = [1000, 2000, 4000, 8000];
const MAX_RETRIES = 4;
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const generateWithRetry = async (fn, ...args) => {
  let retryCount = 0;
  while (retryCount < MAX_RETRIES) {
    try {
      return await fn(...args);
    } catch (error) {
      if (error.message?.includes('503') && retryCount < MAX_RETRIES - 1) {
        await delay(RETRY_DELAYS[retryCount]);
        retryCount++;
        continue;
      }
      throw error;
    }
  }
};

// Reducer for ideas
const ideasReducer = (state, action) => {
  switch (action.type) {
    case 'SET_AUTO_IDEAS':
      return { ...state, autoGenerated: action.payload };
    case 'SET_INTEREST_IDEAS':
      return { ...state, interestGenerated: action.payload };
    case 'TOGGLE_SAVE':
      return {
        ...state,
        autoGenerated: state.autoGenerated.map(idea => 
          idea.title === action.payload.title ? { ...idea, saved: !idea.saved } : idea
        ),
        interestGenerated: state.interestGenerated.map(idea => 
          idea.title === action.payload.title ? { ...idea, saved: !idea.saved } : idea
        )
      };
    default:
      return state;
  }
};

// IdeaCard Component (unchanged from previous enhancement)
const IdeaCard = ({ idea, index, onSelect, variant = "default", isSelected, onSave }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const colorClasses = {
    default: "bg-gradient-to-br from-blue-50 via-white to-blue-50 border-blue-100 hover:border-blue-200",
    selected: "bg-gradient-to-br from-green-50 via-white to-green-50 border-green-200",
    interest: "bg-gradient-to-br from-purple-50 via-white to-purple-50 border-purple-100 hover:border-purple-200",
    saved: "bg-gradient-to-br from-amber-50 via-white to-amber-50 border-amber-200"
  };

  const getConfidenceScore = () => Math.floor(Math.random() * 30) + 70;
  const getValidationScore = () => Math.floor(Math.random() * 40) + 60;

  return (
    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3, delay: index * 0.1 }}>
      <Card 
        className={`transition-all duration-300 ${colorClasses[isSelected ? "selected" : variant]} shadow-md hover:shadow-lg`}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <button className="w-full text-left" onClick={() => setIsExpanded(!isExpanded)}>
          <CardHeader className="py-3 px-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <span className={`${variant === 'interest' ? 'bg-purple-100 text-purple-600' : 'bg-blue-100 text-blue-600'} w-7 h-7 rounded-full flex items-center justify-center text-sm font-medium`}>
                  {index + 1}
                </span>
                <CardTitle className="text-lg font-semibold text-gray-800 truncate">{idea.title}</CardTitle>
              </div>
              <div className="flex items-center gap-2">
                {idea.saved && <Badge className="bg-amber-100 text-amber-700">Saved</Badge>}
                <ChevronDown className={`h-5 w-5 transition-transform ${isExpanded ? 'rotate-180' : ''}`} />
              </div>
            </div>
          </CardHeader>
        </button>
        
        <CardContent className={`transition-all duration-300 ${isExpanded ? 'py-4' : 'py-2'} px-4`}>
          <p className={`text-sm text-gray-600 ${isExpanded ? 'line-clamp-2' : 'line-clamp-2'}`}>{idea.description}</p>
          {isExpanded && (
            <div className="mt-4 space-y-4">
              <div className="space-y-2">
                <div className="flex justify-between items-center text-sm">
                  <span className="text-gray-600">AI Confidence</span>
                  <span className="font-medium text-gray-800">{getConfidenceScore()}%</span>
                </div>
                <Progress value={getConfidenceScore()} className="h-2 bg-gray-200" />
              </div>
              <div className="space-y-2">
                <div className="flex justify-between items-center text-sm">
                  <span className="text-gray-600">Market Viability</span>
                  <span className="font-medium text-gray-800">{getValidationScore()}%</span>
                </div>
                <Progress value={getValidationScore()} className="h-2 bg-blue-200" />
              </div>
              <div className="flex gap-2">
                <Button 
                  onClick={(e) => { e.stopPropagation(); onSelect(idea); }}
                  className={`flex-1 ${isSelected ? 'bg-green-600 hover:bg-green-700' : 'bg-blue-600 hover:bg-blue-700'}`}
                >
                  {isSelected ? <><Star className="h-4 w-4 mr-2" /> Selected</> : <><ArrowRight className="h-4 w-4 mr-2" /> Select</>}
                </Button>
                <Button 
                  variant="outline"
                  onClick={(e) => { e.stopPropagation(); onSave(idea); }}
                  className="flex-1"
                >
                  <Bookmark className={`h-4 w-4 mr-2 ${idea.saved ? 'fill-amber-500 text-amber-500' : ''}`} />
                  {idea.saved ? 'Saved' : 'Save'}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
};

// BrandNameCard Component (unchanged from previous enhancement)
const BrandNameCard = ({ brandName, onSelect, isSelected }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [domainAvailable, setDomainAvailable] = useState(null);

  useEffect(() => {
    setTimeout(() => setDomainAvailable(Math.random() > 0.3), 500);
  }, [brandName]);

  return (
    <motion.div initial={{ opacity: 0, scale: 0.95 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.3 }}>
      <Card 
        className={`bg-gradient-to-br from-purple-50 via-white to-purple-50 border-purple-100 shadow-md hover:shadow-lg transition-all duration-300 ${isSelected ? 'border-purple-400 shadow-lg' : ''}`}
      >
        <CardHeader className="p-4">
          <div className="flex justify-between items-start">
            <h3 className="font-semibold text-lg text-gray-800">{brandName.name}</h3>
            <div className="flex items-center gap-2">
              {domainAvailable === true && <Badge className="bg-green-100 text-green-700">Domain Available</Badge>}
              {domainAvailable === false && <Badge className="bg-red-100 text-red-700">Domain Taken</Badge>}
              {isSelected && <Badge className="bg-green-100 text-green-700">Selected</Badge>}
            </div>
          </div>
        </CardHeader>
        <CardContent className="px-4 pb-4">
          <button className="w-full text-left" onClick={() => setIsExpanded(!isExpanded)}>
            <p className={`text-sm text-gray-600 ${isExpanded ? '' : 'line-clamp-2'}`}>{brandName.explanation}</p>
            <div className="text-center text-gray-400 mt-2">
              {isExpanded ? <ChevronUp className="mx-auto h-5 w-5" /> : <ChevronDown className="mx-auto h-5 w-5" />}
            </div>
          </button>
        </CardContent>
        <CardFooter className="p-4 pt-0">
          <Button
            onClick={() => onSelect(brandName)}
            className={`w-full ${isSelected ? 'bg-green-600 hover:bg-green-700' : 'bg-purple-600 hover:bg-purple-700'}`}
          >
            {isSelected ? (
              <>
                <Star className="h-4 w-4 mr-2" />
                Selected
              </>
            ) : (
              <>
                <ArrowRight className="h-4 w-4 mr-2" />
                Select
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  );
};

// BrandNameGeneration Component
const BrandNameGeneration = ({ selectedIdea, onBack, onNext }) => {
  const [nameStyle, setNameStyle] = useState('');
  const [brandNames, setBrandNames] = useState([]);
  const [selectedBrandName, setSelectedBrandName] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGenerateNames = async () => {
    if (!nameStyle) return;
    setIsLoading(true);
    setError('');
    try {
      const names = await generateWithRetry(generateBrandNames, selectedIdea, nameStyle);
      setBrandNames(names);
    } catch (err) {
      setError('Failed to generate brand names with Gemini. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSelect = useCallback((brandName) => {
    setSelectedBrandName(prev => prev?.name === brandName.name ? null : brandName);
  }, []);

  return (
    <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }} transition={{ duration: 0.3 }} className="space-y-6">
      <Card className="bg-blue-50 border-blue-100 shadow-md">
        <CardContent className="p-6">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="font-semibold text-xl text-gray-800">{selectedIdea.title}</h3>
              <p className="text-sm text-gray-600 mt-2">{selectedIdea.description}</p>
            </div>
            <Button variant="outline" onClick={onBack} className="shadow-sm">
              <ChevronLeft className="h-4 w-4 mr-2" /> Back to Ideas
            </Button>
          </div>
        </CardContent>
      </Card>
      <Card className="border border-gray-100 shadow-md">
        <CardHeader>
          <CardTitle className="text-lg text-gray-800">Generate Brand Names</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-3">
            <Input placeholder="e.g., modern, catchy" value={nameStyle} onChange={(e) => setNameStyle(e.target.value)} className="flex-grow shadow-sm" />
            <Button onClick={handleGenerateNames} disabled={isLoading || !nameStyle} className="bg-purple-600 hover:bg-purple-700 text-white shadow-sm">
              {isLoading ? <Loader2 className="h-5 w-5 animate-spin mr-2" /> : <Sparkles className="h-5 w-5 mr-2" />}
              Generate
            </Button>
          </div>
          {error && <div className="flex items-center gap-2 text-sm text-red-600 bg-red-50 p-2 rounded"><AlertTriangle className="h-4 w-4" />{error}</div>}
        </CardContent>
      </Card>
      <AnimatePresence>
        {brandNames.length > 0 && (
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800">Generated Brand Names</h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {brandNames.map((brandName, index) => (
                <BrandNameCard key={index} brandName={brandName} onSelect={handleSelect} isSelected={selectedBrandName?.name === brandName.name} />
              ))}
            </div>
            {selectedBrandName && (
              <Button onClick={() => onNext(selectedBrandName)} className="mt-4 bg-green-600 hover:bg-green-700">
                <ArrowRight className="h-4 w-4 mr-2" /> Proceed to Logo
              </Button>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

// BusinessPlanGenerator Component
const BusinessPlanGenerator = ({ selectedIdea, selectedBrandName, onBack }) => {
  const [targetMarket, setTargetMarket] = useState('');
  const [fundingGoal, setFundingGoal] = useState('');
  const [businessPlan, setBusinessPlan] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGeneratePlan = async () => {
    if (!targetMarket || !fundingGoal) return;
    setIsLoading(true);
    setError('');
    try {
      const plan = await generateWithRetry(generateBusinessPlan, selectedIdea, selectedBrandName, targetMarket, fundingGoal);
      setBusinessPlan(plan);
    } catch (err) {
      setError('Failed to generate business plan with Gemini. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = () => {
    const planText = `
      Business Plan for ${selectedBrandName.name}
      Executive Summary: ${businessPlan.summary}
      Target Market: ${businessPlan.targetMarket}
      Funding Goal: ${businessPlan.fundingGoal}
      Next Steps: ${businessPlan.nextSteps}
    `;
    const blob = new Blob([planText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${selectedBrandName.name}_Business_Plan.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: -20 }} transition={{ duration: 0.3 }} className="space-y-6">
      <Card className="bg-blue-50 border-blue-100 shadow-md">
        <CardContent className="p-6">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="font-semibold text-xl text-gray-800">{selectedIdea.title} - {selectedBrandName.name}</h3>
              <p className="text-sm text-gray-600 mt-2">{selectedIdea.description}</p>
            </div>
            <Button variant="outline" onClick={onBack} className="shadow-sm">
              <ChevronLeft className="h-4 w-4 mr-2" /> Back to Logo
            </Button>
          </div>
        </CardContent>
      </Card>
      <Card className="border border-gray-100 shadow-md">
        <CardHeader>
          <CardTitle className="text-lg text-gray-800">Generate Your Business Plan</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-4">
            <Input 
              placeholder="Target Market (e.g., Young Professionals)" 
              value={targetMarket} 
              onChange={(e) => setTargetMarket(e.target.value)} 
              className="shadow-sm" 
            />
            <Input 
              placeholder="Funding Goal (e.g., $50,000)" 
              value={fundingGoal} 
              onChange={(e) => setFundingGoal(e.target.value)} 
              className="shadow-sm" 
            />
            <Button 
              onClick={handleGeneratePlan} 
              disabled={isLoading || !targetMarket || !fundingGoal} 
              className="bg-blue-600 hover:bg-blue-700 text-white shadow-sm w-full"
            >
              {isLoading ? <Loader2 className="h-5 w-5 animate-spin mr-2" /> : <Sparkles className="h-5 w-5 mr-2" />}
              Generate Plan
            </Button>
          </div>
          {error && <div className="flex items-center gap-2 text-sm text-red-600 bg-red-50 p-2 rounded"><AlertTriangle className="h-4 w-4" />{error}</div>}
        </CardContent>
      </Card>
      {businessPlan && (
        <Card className="bg-white border-blue-100 shadow-md">
          <CardHeader>
            <CardTitle className="text-lg text-gray-800">Your Superhero Business Plan</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-semibold text-gray-800">Executive Summary</h4>
              <p className="text-sm text-gray-600">{businessPlan.summary}</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-800">Target Market</h4>
              <p className="text-sm text-gray-600">{businessPlan.targetMarket}</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-800">Funding Goal</h4>
              <p className="text-sm text-gray-600">{businessPlan.fundingGoal}</p>
            </div>
            <div>
              <h4 className="font-semibold text-gray-800">Next Steps</h4>
              <p className="text-sm text-gray-600">{businessPlan.nextSteps}</p>
            </div>
            <Button onClick={handleDownload} className="bg-green-600 hover:bg-green-700 w-full">
              <CheckCircle className="h-4 w-4 mr-2" /> Download Plan
            </Button>
          </CardContent>
        </Card>
      )}
    </motion.div>
  );
};

// Main BrandAssistant Component
const BrandAssistant = () => {
  const [state, dispatch] = useReducer(ideasReducer, { autoGenerated: [], interestGenerated: [] });
  const [skills, setSkills] = useState([]);
  const [currentInterest, setCurrentInterest] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [currentPage, setCurrentPage] = useState(0);
  const [selectedIdea, setSelectedIdea] = useState(null);
  const [selectedBrandName, setSelectedBrandName] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('Please log in to continue');
        const { data: profile } = await supabase.from('profiles').select('skills').eq('id', user.id).single();
        const userSkills = profile?.skills || [];
        setSkills(userSkills);
        if (userSkills.length > 0) {
          const ideas = await generateWithRetry(generateIdeas, userSkills, '');
          dispatch({ type: 'SET_AUTO_IDEAS', payload: ideas.map(idea => ({ ...idea, saved: false })) });
        }
      } catch (err) {
        setError('Failed to load data. Please try again.');
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, []);

  const handleSelectIdea = useCallback((idea) => {
    setSelectedIdea(idea);
    setCurrentPage(1);
  }, []);

  const handleSaveIdea = useCallback(async (idea) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('Please log in to save ideas');

      const ideaData = {
        user_id: user.id,
        idea_title: idea.title,
        idea_description: idea.description,
        created_at: new Date().toISOString()
      };

      if (!idea.saved) {
        await supabase.from('saved_ideas').insert([ideaData]);
      } else {
        await supabase.from('saved_ideas').delete().match({ user_id: user.id, idea_title: idea.title });
      }

      dispatch({ type: 'TOGGLE_SAVE', payload: idea });
    } catch (err) {
      setError('Failed to save idea. Please try again.');
    }
  }, []);

  const handleGenerateIdeas = async () => {
    if (!currentInterest) return;
    setIsLoading(true);
    setError('');
    try {
      const ideas = await generateWithRetry(generateIdeas, skills, currentInterest);
      dispatch({ 
        type: 'SET_INTEREST_IDEAS', 
        payload: ideas.map(idea => ({ ...idea, saved: false }))
      });
    } catch (err) {
      setError(err.message?.includes('503') ? 'Gemini service is busy. Please try again later.' : 'Failed to generate ideas');
    } finally {
      setIsLoading(false);
    }
  };

  const pages = [
    {
      title: "Skills & Ideas",
      content: (
        <div className="space-y-8">
          <Card className="bg-white border-blue-100 shadow-md">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2 text-gray-800">
                <Brain className="w-6 h-6 text-blue-500" />
                Your Super Skills
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                {skills.map((skill, index) => (
                  <Badge key={index} className="bg-blue-50 text-blue-700 hover:bg-blue-100 shadow-sm">
                    {skill}
                  </Badge>
                ))}
              </div>
              <p className="text-sm text-gray-600 mt-3">Unleash ideas based on your heroic expertise.</p>
            </CardContent>
          </Card>

          {state.autoGenerated.length > 0 && (
            <div>
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-800">Suggested Super Ideas</h3>
                <Badge variant="outline" className="text-blue-600">{state.autoGenerated.length} ideas</Badge>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {state.autoGenerated.map((idea, index) => (
                  <IdeaCard 
                    key={index}
                    idea={idea}
                    index={index}
                    onSelect={handleSelectIdea}
                    onSave={handleSaveIdea}
                    isSelected={selectedIdea?.title === idea.title}
                  />
                ))}
              </div>
            </div>
          )}

          <Card className="border border-gray-100 shadow-md">
            <CardHeader>
              <CardTitle className="text-lg text-gray-800">Generate New Super Ideas</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex gap-3">
                <Input
                  placeholder="What's your heroic business interest?"
                  value={currentInterest}
                  onChange={(e) => setCurrentInterest(e.target.value)}
                  className="flex-grow shadow-sm"
                />
                <Button 
                  onClick={handleGenerateIdeas}
                  disabled={isLoading || !currentInterest}
                  className="bg-blue-600 hover:bg-blue-700 text-white shadow-sm"
                >
                  {isLoading ? <Loader2 className="h-5 w-5 animate-spin mr-2" /> : <Sparkles className="h-5 w-5 mr-2" />}
                  Generate
                </Button>
              </div>
              {error && (
                <div className="flex items-center gap-2 text-sm text-red-600 bg-red-50 p-2 rounded">
                  <AlertTriangle className="h-4 w-4" />
                  <span>{error}</span>
                </div>
              )}
            </CardContent>
          </Card>

          <AnimatePresence>
            {state.interestGenerated.length > 0 && (
              <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -20 }} transition={{ duration: 0.3 }}>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-semibold text-gray-800">Ideas for {currentInterest}</h3>
                  <Badge variant="outline" className="text-purple-600">{state.interestGenerated.length} ideas</Badge>
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  {state.interestGenerated.map((idea, index) => (
                    <IdeaCard 
                      key={index}
                      idea={idea}
                      index={index}
                      variant="interest"
                      onSelect={handleSelectIdea}
                      onSave={handleSaveIdea}
                      isSelected={selectedIdea?.title === idea.title}
                    />
                  ))}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      )
    },
    {
      title: "Brand Names",
      content: (
        selectedIdea ? (
          <BrandNameGeneration 
            selectedIdea={selectedIdea}
            onBack={() => { setCurrentPage(0); setSelectedIdea(null); }}
            onNext={(brandName) => { setSelectedBrandName(brandName); setCurrentPage(2); }}
          />
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-600 mb-4">Select an idea to generate brand names.</p>
            <Button onClick={() => setCurrentPage(0)} variant="outline" className="shadow-sm">
              <ChevronLeft className="h-4 w-4 mr-2" /> Back to Ideas
            </Button>
          </div>
        )
      )
    },
    {
      title: "Logo",
      content: (
        selectedBrandName ? (
          <LogoGeneration 
            selectedBrandName={selectedBrandName}
            onBack={() => { setCurrentPage(1); setSelectedBrandName(null); }}
            onNext={() => setCurrentPage(3)}
          />
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-600 mb-4">Select a brand name to generate a logo.</p>
            <Button onClick={() => setCurrentPage(1)} variant="outline" className="shadow-sm">
              <ChevronLeft className="h-4 w-4 mr-2" /> Back to Brand Names
            </Button>
          </div>
        )
      )
    },
    {
      title: "Business Plan",
      content: (
        selectedIdea && selectedBrandName ? (
          <BusinessPlanGenerator 
            selectedIdea={selectedIdea}
            selectedBrandName={selectedBrandName}
            onBack={() => setCurrentPage(2)}
          />
        ) : (
          <div className="text-center py-12">
            <p className="text-gray-600 mb-4">Complete the previous steps to generate a business plan.</p>
            <Button onClick={() => setCurrentPage(0)} variant="outline" className="shadow-sm">
              <ChevronLeft className="h-4 w-4 mr-2" /> Back to Ideas
            </Button>
          </div>
        )
      )
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-blue-200">
      <Header isForDashboard={true} />
      <main className="container mx-auto p-6 pt-24 max-w-7xl">
        <Card className="border-0 shadow-lg bg-white">
          <CardHeader className="sticky top-16 bg-white z-10 border-b border-blue-100 py-4 rounded-t-lg">
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-4">
                <CardTitle className="text-xl flex items-center gap-2 text-gray-800">
                  <Brain className="w-6 h-6 text-blue-600 animate-pulse" />
                  {pages[currentPage].title}
                </CardTitle>
                <div className="flex gap-2">
                  {pages.map((page, index) => (
                    <Badge
                      key={index}
                      variant={currentPage === index ? "default" : "outline"}
                      className={`cursor-pointer shadow-sm ${currentPage < index ? 'opacity-50 cursor-not-allowed' : ''}`}
                      onClick={() => currentPage >= index && setCurrentPage(index)}
                    >
                      {page.title}
                    </Badge>
                  ))}
                </div>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" onClick={() => setCurrentPage(prev => Math.max(0, prev - 1))} disabled={currentPage === 0} className="h-9 w-9 p-0 shadow-sm">
                  <ChevronLeft className="h-5 w-5" />
                </Button>
                <Button variant="outline" onClick={() => setCurrentPage(prev => Math.min(pages.length - 1, prev + 1))} disabled={currentPage === pages.length - 1} className="h-9 w-9 p-0 shadow-sm">
                  <ChevronRight className="h-5 w-5" />
                </Button>
              </div>
            </div>
            <Progress value={(currentPage + 1) * 25} className="mt-4 h-2 bg-blue-200" />
          </CardHeader>
          <CardContent className="p-6">
            <AnimatePresence mode="wait">
              <motion.div key={currentPage} initial={{ opacity: 0, x: currentPage === 0 ? -20 : 20 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: currentPage === 0 ? 20 : -20 }} transition={{ duration: 0.3 }}>
                {isLoading ? (
                  <div className="flex items-center justify-center py-12">
                    <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
                  </div>
                ) : error ? (
                  <div className="bg-red-50 text-red-600 p-4 rounded-md mb-6 flex items-center gap-2 text-sm">
                    <AlertTriangle className="h-5 w-5" />{error}
                  </div>
                ) : (
                  pages[currentPage].content
                )}
              </motion.div>
            </AnimatePresence>
          </CardContent>
        </Card>
      </main>
    </div>
  );
};

export default BrandAssistant;